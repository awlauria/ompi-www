<?php
$topdir = "../../../..";
# Note that we must use the PHP "$$" indirection to assign to the
# "title" variable, because if we list "$ title" (without the space)
# in this file, Doxygen will replace it with a string title.
$ver = basename(getcwd());
$thwarting_doxygen_preprocessor = "title";
$$thwarting_doxygen_preprocessor = "Portable Hardware Locality (hwloc) Documentation: $ver";
$header_include_file = "$topdir/projects/hwloc/doc/$ver/www.open-mpi.org-css.inc";
include_once("$topdir/projects/hwloc/nav.inc");
include_once("$topdir/includes/header.inc");
include_once("$topdir/includes/code.inc");
?>
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',false,false,'search.php','Search');
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Topology Attributes: Distances, Memory Attributes and CPU Kinds </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p> 
<div class="section">
</p>
<p>Besides the hierarchy of objects and individual object attributes (see <a class="el" href="a00356.php">Object attributes</a>), hwloc may also expose finer information about the hardware organization.</p>
<p> 
</div><div class="section" id="topoattrs_distances">
 </p>
<h1><a class="anchor" id="topoattrs_distances"></a>
Distances</h1>
<p>A machine with 4 CPUs may have identical links between every pairs of CPUs, or those CPUs could also only be connected through a ring. In the ring case, accessing the memory of nearby CPUs is slower than local memory, but it is also faster than accessing the memory of CPU on the opposite side of the ring. These deep details cannot be exposed in the hwloc hierarchy, that is why hwloc also exposes distances.</p>
<p>Distances are matrices of values between sets of objects, usually latencies or bandwidths. By default, hwloc tries to get a matrix of relative latencies between NUMA nodes when exposed by the hardware.</p>
<p>In the aforementioned ring case, the matrix could report 10 for latency between a NUMA node and itself, 20 for nearby nodes, and 30 for nodes that are opposites on the ring. Those are theoretical values exposed by hardware vendors (in the System Locality Distance Information Table (SLIT) in the ACPI) rather than physical latencies.</p>
<p>Users may also specify their own matrices between any set of objects, even if these objects are of different types (e.g. bandwidths between GPUs and CPUs).</p>
<p>The entire API is located in <a class="el" href="a00101_source.php" title="Object distances.">hwloc/distances.h</a>. See also <a class="el" href="a00178.php">Retrieve distances between objects</a>, as well as <a class="el" href="a00179.php">Helpers for consulting distance matrices</a> and <a class="el" href="a00180.php">Add or remove distances between objects</a>.</p>
<p> 
</div><div class="section" id="topoattrs_memattrs">
 </p>
<h1><a class="anchor" id="topoattrs_memattrs"></a>
Memory Attributes</h1>
<p>Machines with heterogeneous memory, for instance high-bandwidth memory (HBM), normal memory (DDR), and/or high-capacity slow memory (such as non-volatile memory DIMMs, NVDIMMs) require applications to allocate buffers in the appropriate target memory depending on performance and capacity needs. Those target nodes may be exposed in the hwloc hierarchy as different memory children but there is a need for performance information to select the appropriate one.</p>
<p>hwloc memory attributes are designed to expose memory information such as latency, bandwidth, etc. Users may also specify their own attributes and values.</p>
<p>The memory attributes API is located in <a class="el" href="a00104_source.php" title="Memory node attributes.">hwloc/memattrs.h</a>, see <a class="el" href="a00181.php">Comparing memory node attributes for finding where to allocate on</a> and <a class="el" href="a00182.php">Managing memory attributes</a> for details.</p>
<p> 
</div><div class="section" id="topoattrs_cpukinds">
 </p>
<h1><a class="anchor" id="topoattrs_cpukinds"></a>
CPU Kinds</h1>
<p>Hybrid CPUs may contain different kinds of cores. The CPU kinds API in <a class="el" href="a00107_source.php" title="Kinds of CPU cores.">hwloc/cpukinds.h</a> provides a way to list the sets of PUs in each kind and get some optional information about their hardware characteristics and efficiency.</p>
<p>If the operating system provides efficiency information (e.g. Windows 10), it is used to rank hwloc CPU kinds by efficiency. Otherwise, hwloc implements several heuristics based on frequencies and core types (see HWLOC_CPUKINDS_RANKING in <a class="el" href="a00352.php">Environment Variables</a>).</p>
<p>Attributes include: </p><dl>
<dt>FrequencyMaxMHz (Linux) </dt>
<dd>The maximal operating frequency of the core, as reported by <code>cpufreq</code> drivers on Linux.  </dd>
<dt>FrequencyBaseMHz (Linux) </dt>
<dd>The base operating frequency of the core, as reported by some <code>cpufreq</code> drivers on Linux (e.g. <code>intel_pstate</code>).  </dd>
<dt>CoreType (x86, Linux) </dt>
<dd>A string describing the kind of core, currently <code>IntelAtom</code> or <code>IntelCore</code>, as reported by the x86 CPUID instruction and future Linux kernels on some Intel processors.  </dd>
<dt>LinuxCPUType (Linux) </dt>
<dd>The Linux-specific CPU type found in sysfs, such as <code>intel_atom_0</code>, as reported by future Linux kernels on some Intel processors.  </dd>
</dl>
<p>See <a class="el" href="a00183.php">Kinds of CPU cores</a> for details. </p>
</div></div><!-- contents -->
</div><!-- PageDoc -->
<?php
include_once("$topdir/includes/footer.inc");
