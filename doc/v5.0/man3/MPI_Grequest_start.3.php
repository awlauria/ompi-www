.\" Automatically generated by Pandoc 2.14.2
.\"
.TH "MPI_Grequest_start" "3" "" "2021-08-30" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Grequest_start\f[R] - Starts a generalized request and returns
a handle to it in \f[C]request\f[R].
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include <mpi.h>

int MPI_Grequest_start(MPI_Grequest_query_function *query_fn,
    MPI_Grequest_free_function *free_fn,
    MPI_Grequest_cancel_function *cancel_fn, void *extra_state,
    MPI_Request *request)
\f[R]
.fi
.SS Fortran Syntax (See Fortran 77 Notes)
.IP
.nf
\f[C]
USE MPI
! or the older form: INCLUDE \[aq]mpif.h\[aq]

MPI_GREQUEST_START(QUERY_FN, FREE_FN, CANCEL_FN, EXTRA_STATE,
    REQUEST, IERROR)
    INTEGER REQUEST, IERROR
    EXTERNAL QUERY_FN, FREE_FN, CANCEL_FN
      INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
\f[R]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE mpi_f08

MPI_Grequest_start(query_fn, free_fn, cancel_fn, extra_state, request,
        ierror)
    PROCEDURE(MPI_Grequest_query_function) :: query_fn
    PROCEDURE(MPI_Grequest_free_function) :: free_fn
    PROCEDURE(MPI_Grequest_cancel_function) :: cancel_fn
    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state
    TYPE(MPI_Request), INTENT(OUT) :: request
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
\f[R]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]query_fn\f[R] : Callback function invoked when request status is
queried (function).
.IP \[bu] 2
\f[C]free_fn\f[R] : Callback function invoked when request is freed
(function).
.IP \[bu] 2
\f[C]cancel_fn\f[R] : Callback function invoked when request is canceled
(function).
.IP \[bu] 2
\f[C]extra_state\f[R] : Extra state.
.SH Output Parameters
.IP \[bu] 2
\f[C]request\f[R] : Generalized request (handle).
.IP \[bu] 2
\f[C]IERROR\f[R] : Fortran only: Error status (integer).
.SH Description
.PP
\f[C]MPI_Grequest_start\f[R] starts a generalized \f[C]request\f[R] and
returns a handle to it in \f[C]request\f[R].
.PP
The syntax and meaning of the callback functions are listed below.
All callback functions are passed the \f[C]extra_state\f[R] argument
that was associated with the \f[C]request\f[R] by the starting call
\f[C]MPI_Grequest_start\f[R].
This can be used to maintain user-defined state for the
\f[C]request\f[R].
In C, the query function is
.IP
.nf
\f[C]
typedef int MPI_Grequest_query_function(void *extra_state,
    MPI_Status *status);
\f[R]
.fi
.PP
In Fortran, it is
.IP
.nf
\f[C]
SUBROUTINE GREQUEST_QUERY_FUNCTION(EXTRA_STATE, STATUS, IERROR)
    INTEGER STATUS(MPI_STATUS_SIZE), IERROR
    INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
\f[R]
.fi
.PP
The \f[C]query_fn\f[R] function computes the status that should be
returned for the generalized request.
The status also includes information about successful/unsuccessful
cancellation of the request (result to be returned by
\f[C]MPI_Test_cancelled\f[R]).
.PP
The \f[C]query_fn\f[R] function is invoked by the
\f[C]MPI_{Wait|Test}{any|some|all}\f[R] call that completed the
generalized request associated with this callback.
The callback function is also invoked by calls to
\f[C]MPI_Request_get_status\f[R] if the request is complete when the
call occurs.
In both cases, the callback is passed a reference to the corresponding
status variable passed by the user to the MPI call.
If the user provided \f[C]MPI_STATUS_IGNORE\f[R] or
\f[C]MPI_STATUSES_IGNORE\f[R] to the MPI function that causes
\f[C]query_fn\f[R] to be called, then MPI will pass a valid status
object to \f[C]query_fn\f[R], and this status will be ignored upon
return of the callback function.
Note that \f[C]query_fn\f[R] is invoked only after
\f[C]MPI_Grequest_complete\f[R] is called on the request; it may be
invoked several times for the same generalized request.
Note also that a call to \f[C]MPI_{Wait|Test}{some|all}\f[R] may cause
multiple invocations of \f[C]query_fn\f[R] callback functions, one for
each generalized request that is completed by the MPI call.
The order of these invocations is not specified by MPI.
.PP
In C, the free function is
.IP
.nf
\f[C]
typedef int MPI_Grequest_free_function(void *extra_state);
\f[R]
.fi
.PP
And in Fortran, it is
.IP
.nf
\f[C]
SUBROUTINE GREQUEST_FREE_FUNCTION(EXTRA_STATE, IERROR)
    INTEGER IERROR
    INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
\f[R]
.fi
.PP
The \f[C]free_fn\f[R] callback function is invoked to clean up
user-allocated resources when the generalized request is freed.
.PP
The \f[C]free_fn\f[R] function is invoked by the
\f[C]MPI_{Wait|Test}{any|some|all}\f[R] call that completed the
generalized request associated with this callback.
\f[C]free_fn\f[R] is invoked after the call to \f[C]query_fn\f[R] for
the same request.
However, if the MPI call completed multiple generalized requests, the
order in which \f[C]free_fn\f[R] callback functions are invoked is not
specified by MPI.
.PP
The \f[C]free_fn\f[R] callback is also invoked for generalized requests
that are freed by a call to \f[C]MPI_Request_free\f[R] (no call to
\f[C]MPI_{Wait|Test}{any|some|all}\f[R] will occur for such a request).
In this case, the callback function will be called either in the MPI
call \f[C]MPI_Request_free(request)\f[R] or in the MPI call
\f[C]MPI_Grequest_complete(request)\f[R], whichever happens last.
In other words, in this case the actual freeing code is executed as soon
as both calls (\f[C]MPI_Request_free\f[R] and
\f[C]MPI_Grequest_complete\f[R]) have occurred.
The \f[C]request\f[R] is not deallocated until after \f[C]free_fn\f[R]
completes.
Note that \f[C]free_fn\f[R] will be invoked only once per request by a
correct program.
.PP
In C, the cancel function is
.IP
.nf
\f[C]
typedef int MPI_Grequest_cancel_function(void *extra_state, int complete);
\f[R]
.fi
.PP
In Fortran, the cancel function is
.IP
.nf
\f[C]
SUBROUTINE GREQUEST_CANCEL_FUNCTION(EXTRA_STATE, COMPLETE, IERROR)
     INTEGER IERROR
     INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
     LOGICAL COMPLETE
\f[R]
.fi
.PP
The \f[C]cancel_fn\f[R] function is invoked to start the cancellation of
a generalized request.
It is called by \f[C]MPI_Request_cancel(request)\f[R].
MPI passes to the callback function complete=true if
\f[C]MPI_Grequest_complete\f[R] has already been called on the request,
and complete=false otherwise.
.SH Fortran 77 Notes
.PP
The MPI standard prescribes portable Fortran syntax for the
\f[C]EXTRA_STATE\f[R] argument only for Fortran 90.
FORTRAN 77 users may use the non-portable syntax
.IP
.nf
\f[C]
INTEGER*MPI_ADDRESS_KIND EXTRA_STATE
\f[R]
.fi
.PP
where \f[C]MPI_ADDRESS_KIND\f[R] is a constant defined in mpif.h and
gives the length of the declared integer in bytes.
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.PP
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[R];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[R] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
.PP
All callback functions return an error code.
The code is passed back and dealt with as appropriate for the error code
by the MPI function that invoked the callback function.
For example, if error codes are returned, then the error code returned
by the callback function will be returned by the MPI function that
invoked the callback function.
In the case of a \f[C]MPI_{Wait|Test}any\f[R] call that invokes both
\f[C]query_fn\f[R] and \f[C]free_fn\f[R], the MPI call will return the
error code returned by the last callback, namely \f[C]free_fn\f[R].
If one or more of the \f[C]request\f[R]s in a call to
\f[C]MPI_{Wait|Test}{some|all\f[R]} has failed, then the MPI call will
return \f[C]MPI_ERR_IN_STATUS\f[R].
In such a case, if the MPI call was passed an array of statuses, then
MPI will return in each of the statuses that correspond to a completed
generalized \f[C]request\f[R] the error code returned by the
corresponding invocation of its \f[C]free_fn\f[R] callback function.
However, if the MPI function was passed \f[C]MPI_STATUSES_IGNORE\f[R],
then the individual error codes returned by each callback function will
be lost.
.PP
See the MPI man page for a full list of MPI error codes.
