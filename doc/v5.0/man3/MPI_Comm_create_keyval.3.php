.\" Automatically generated by Pandoc 2.14.2
.\"
.TH "MPI_Comm_create_keyval" "3" "" "2021-08-30" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Comm_create_keyval\f[R] - Generates a new attribute key.
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include <mpi.h>

int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function
    *comm_copy_attr_fn, MPI_Comm_delete_attr_function
    *comm_delete_attr_fn, int *comm_keyval,
    void *extra_state)
\f[R]
.fi
.SS Fortran Syntax (See Fortran 77 Notes)
.IP
.nf
\f[C]
USE MPI
! or the older form: INCLUDE \[aq]mpif.h\[aq]

MPI_COMM_CREATE_KEYVAL(COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN,
    COMM_KEYVAL, EXTRA_STATE, IERROR)
    EXTERNAL COMM_COPY_ATTR_FN, COMM_DELETE_ATTR_FN
    INTEGER COMM_KEYVAL, IERROR 

    INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE
\f[R]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE mpi_f08

MPI_Comm_create_keyval(comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval,
        extra_state, ierror)
    PROCEDURE(MPI_Comm_copy_attr_function) :: comm_copy_attr_fn
    PROCEDURE(MPI_Comm_delete_attr_function) :: comm_delete_attr_fn
    INTEGER, INTENT(OUT) :: comm_keyval
    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
\f[R]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]comm_copy_attr_fn\f[R] : Copy callback function for
\f[C]comm_keyval\f[R] (function).
.IP \[bu] 2
\f[C]comm_delete_attr_fn\f[R] : Delete callback function for
\f[C]comm_keyval\f[R] (function).
.IP \[bu] 2
\f[C]extra_state\f[R] : Extra state for callback functions.
.SH Output Parameter
.IP \[bu] 2
\f[C]comm_keyval\f[R] : Key value for future access (integer).
.IP \[bu] 2
\f[C]IERROR\f[R] : Fortran only: Error status (integer).
.SH Description
.PP
This function replaces \f[C]MPI_Keyval_create\f[R], the use of which is
deprecated.
The C binding is identical.
The Fortran binding differs in that \f[C]extra_state\f[R] is an
address-sized integer.
Also, the copy and delete callback functions have Fortran bindings that
are consistent with address-sized attributes.
The argument \f[C]comm_copy_attr_fn\f[R] may be specified as
\f[C]MPI_COMM_NULL_COPY_FN\f[R] or \f[C]MPI_COMM_DUP_FN\f[R] from C or
Fortran.
\f[C]MPI_COMM_NULL_COPY_FN\f[R] is a function that does nothing more
than returning \f[C]flag = 0\f[R] and \f[C]MPI_SUCCESS\f[R].
\f[C]MPI_COMM_DUP_FN\f[R] is a simple-minded copy function that sets
\f[C]flag = 1\f[R], returns the value of \f[C]attribute_val_in\f[R] in
\f[C]attribute_val_out\f[R], and returns \f[C]MPI_SUCCESS\f[R].
These replace the MPI-1 predefined callbacks \f[C]MPI_NULL_COPY_FN\f[R]
and \f[C]MPI_DUP_FN\f[R], the use of which is deprecated.
The two C callback functions are:
.IP
.nf
\f[C]
typedef int MPI_Comm_copy_attr_function(MPI_Comm oldcomm, int comm_keyval,
             void *extra_state, void *attribute_val_in,
             void *attribute_val_out, int *flag);

typedef int MPI_Comm_delete_attr_function(MPI_Comm comm, int comm_keyval,
             void *attribute_val, void *extra_state);
\f[R]
.fi
.PP
which are the same as the MPI-1.1 calls but with a new name.
The old names are deprecated.
The two Fortran callback functions are:
.IP
.nf
\f[C]
SUBROUTINE COMM_COPY_ATTR_FN(OLDCOMM, COMM_KEYVAL, EXTRA_STATE,
             ATTRIBUTE_VAL_IN, ATTRIBUTE_VAL_OUT, FLAG, IERROR)
    INTEGER OLDCOMM, COMM_KEYVAL, IERROR

    INTEGER(KIND=MPI_ADDRESS_KIND) EXTRA_STATE, ATTRIBUTE_VAL_IN,
        ATTRIBUTE_VAL_OUT
    LOGICAL FLAG

SUBROUTINE COMM_DELETE_ATTR_FN(COMM, COMM_KEYVAL, ATTRIBUTE_VAL, EXTRA_STATE,
             IERROR)
    INTEGER COMM, COMM_KEYVAL, IERROR

    INTEGER(KIND=MPI_ADDRESS_KIND) ATTRIBUTE_VAL, EXTRA_STATE
\f[R]
.fi
.SS Fortran 77 Notes
.PP
The MPI standard prescribes portable Fortran syntax for the
\f[C]EXTRA_STATE\f[R] argument only for Fortran 90.
FORTRAN 77 users may use the non-portable syntax
.IP
.nf
\f[C]
INTEGER*MPI_ADDRESS_KIND EXTRA_STATE
\f[R]
.fi
.PP
where \f[C]MPI_ADDRESS_KIND\f[R] is a constant defined in mpif.h and
gives the length of the declared integer in bytes.
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[R];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[R] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
See the MPI man page for a full list of MPI error codes.
SEE ALSO
.SH See Also
