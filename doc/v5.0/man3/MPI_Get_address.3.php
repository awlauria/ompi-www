.\" Automatically generated by Pandoc 2.14.2
.\"
.TH "MPI_Get_address" "3" "" "2021-08-30" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Get_address\f[R] - Gets the address of a location in memory.
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include <mpi.h>

int MPI_Get_address(const void *location, MPI_Aint *address)
\f[R]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE MPI
! or the older form: INCLUDE \[aq]mpif.h\[aq]

MPI_GET_ADDRESS(LOCATION, ADDRESS, IERROR)
    <type> LOCATION(*)
    INTEGER(KIND=MPI_ADDRESS_KIND) ADDRESS
    INTEGER IERROR
\f[R]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE mpi_f08

MPI_Get_address(location, address, ierror)
    TYPE(*), DIMENSION(..), ASYNCHRONOUS :: location
    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: address
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
\f[R]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]location\f[R] : Location in caller memory (choice).
.SH Output Parameters
.IP \[bu] 2
\f[C]address\f[R] : Address of location (integer).
.IP \[bu] 2
\f[C]IERROR\f[R] : Fortran only: Error status (integer).
.SH Description
.PP
\f[C]MPI_Get_address\f[R] returns the byte \f[C]address\f[R] of a
location in memory.
.PP
Example: Using \f[C]MPI_Get_address\f[R] for an array.
.IP
.nf
\f[C]
EAL A(100,100)
    INTEGER I1, I2, DIFF
    CALL MPI_GET_ADDRESS(A(1,1), I1, IERROR)
    CALL MPI_GET_ADDRESS(A(10,10), I2, IERROR)
    DIFF = I2 - I1
! The value of DIFF is 909*sizeofreal; the values of I1 and I2 are
! implementation dependent.
\f[R]
.fi
.SH Notes
.PP
Current Fortran MPI codes will run unmodified and will port to any
system.
However, they may fail if \f[C]addresses\f[R] larger than 2\[ha]32 - 1
are used in the program.
New codes should be written so that they use the new functions.
This provides compatibility with C and avoids errors on 64-bit
architectures.
However, such newly written codes may need to be (slightly) rewritten to
port to old Fortran 77 environments that do not support KIND
declarations.
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
.PP
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[R];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[R] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
