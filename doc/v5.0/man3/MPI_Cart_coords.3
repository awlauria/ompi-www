.\" Automatically generated by Pandoc 2.14.2
.\"
.TH "MPI_Cart_coords" "3" "" "2021-08-30" "Open MPI"
.hy
.SH Name
.PP
\f[C]MPI_Cart_coords\f[R] - Determines process coords in Cartesian
topology given rank in group.
.SH Syntax
.SS C Syntax
.IP
.nf
\f[C]
#include <mpi.h>

int MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims,
    int coords[])
\f[R]
.fi
.SS Fortran Syntax
.IP
.nf
\f[C]
USE MPI
! or the older form: INCLUDE \[aq]mpif.h\[aq]

MPI_CART_COORDS(COMM, RANK, MAXDIMS, COORDS, IERROR)
    INTEGER COMM, RANK, MAXDIMS, COORDS(*), IERROR
\f[R]
.fi
.SS Fortran 2008 Syntax
.IP
.nf
\f[C]
USE mpi_f08

MPI_Cart_coords(comm, rank, maxdims, coords, ierror)
    TYPE(MPI_Comm), INTENT(IN) :: comm
    INTEGER, INTENT(IN) :: rank, maxdims
    INTEGER, INTENT(OUT) :: coords(maxdims)
    INTEGER, OPTIONAL, INTENT(OUT) :: ierror
\f[R]
.fi
.SH Input Parameters
.IP \[bu] 2
\f[C]comm\f[R] : Communicator with Cartesian structure (handle).
.IP \[bu] 2
\f[C]rank\f[R] : Rank of a process within group of comm (integer).
.IP \[bu] 2
\f[C]maxdims\f[R] : Length of vector coords in the calling program
(integer).
Length of vector coords in the calling program (integer).
.SH Output Parameters
.IP \[bu] 2
\f[C]coords\f[R] : Integer array (of size ndims,which was defined by
MPI_Cart_create call) containing the Cartesian coordinates of specified
process (integer).
.IP \[bu] 2
\f[C]IERROR\f[R] : Fortran only: Error status (integer).
.SH Description
.PP
\f[C]MPI_Cart_coords\f[R] provies a mapping of \f[C]rank\f[R]s to
Cartesian coordinates.
.SH Errors
.PP
Almost all MPI routines return an error value; C routines as the value
of the function and Fortran routines in the last argument.
Before the error value is returned, the current MPI error handler is
called.
By default, this error handler aborts the MPI job, except for I/O
function errors.
The error handler may be changed with \f[C]MPI_Comm_set_errhandler\f[R];
the predefined error handler \f[C]MPI_ERRORS_RETURN\f[R] may be used to
cause error values to be returned.
Note that MPI does not guarantee that an MPI program can continue past
an error.
